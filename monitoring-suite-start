#!/usr/bin/env bash
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements. See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

DIR=$(dirname "$0")
CONFIG_DIR=$(dirname "$0")/etc
BINARY_DIR=$(dirname "$0")/bin

for i in "$@"
do
case $i in
    --enable-security)
    export SECURITY_ENABLE=true
    shift
    ;;
    --single-node)
    export SINGLE_NODE=true
    shift
    ;;
    *)
    # ignore
    ;;
esac
done

if [ -z "$SINGLE_NODE" ]; then
  export SINGLE_NODE=false
fi

if [ -z "$SECURITY_ENABLE" ]; then
    export SECURITY_ENABLE=false
fi


echo "*************************************************************************"
echo "*       Staring Kafka Confluent Platform / Prometheus and Grafana       *"
echo "*************************************************************************"

if [ "$SECURITY_ENABLE" = "true" ]; then
   DOCKER_COMPOSE_FILE="docker-compose-secured.yml" 
else
   DOCKER_COMPOSE_FILE="docker-compose.yml" 
fi

(. ./monitoring-suite-stop)

echo -e "\n‚è≥ Copying grafana dashboards for container volumes"
cp -r $DIR/grafana $CONFIG_DIR/grafana

rm -rf $DIR/build/jmx_exporter && mkdir -p $DIR/build/jmx_exporter

generate_jmx_exporter_cfg (){
  service="$1"
  echo -e "\n‚è≥ Generate JMX exporter configuration for $service"
  name=`echo $service  | awk -F ":" '{ print $1'} `
  cat jmx_exporter/jmx_exporter_kafka_broker.yml | sed s,%HOST_PORT%,$service,g  > $DIR/build/jmx_exporter/jmx_exporter_kafka_broker_$name.yml
}

if [ "$SINGLE_NODE" = "true" ]; then
   generate_jmx_exporter_cfg "kafka101:9991"
else
  for i in kafka101:9991 kafka102:9992 kafka103:9993; do 
    generate_jmx_exporter_cfg "$1"
  done  
fi

echo -e "\nüê≥ Starting Zookeeper..."

docker-compose -f ${DOCKER_COMPOSE_FILE} up -d zookeeper

if [ "$SECURITY_ENABLE" = "true" ]; then
    echo "Creating default kafka user for SASL/SCRAM"
    ./$BINARY_DIR/create-admin-scram-users
fi

echo -e "\nüê≥ Starting Kafka Brokers..."
if [ "$SINGLE_NODE" = "true" ]; then
  docker-compose -f ${DOCKER_COMPOSE_FILE} up -d kafka101
else
  docker-compose -f ${DOCKER_COMPOSE_FILE} up -d kafka101 kafka102 kafka103  
fi

echo -e "\nüê≥ Starting JMX exporters, Prometheus and Grafana..."

if [ "$SINGLE_NODE" = "true" ]; then
  docker-compose -f ${DOCKER_COMPOSE_FILE} up -d broker_jmx_exporter101
else
  docker-compose -f ${DOCKER_COMPOSE_FILE} up -d broker_jmx_exporter101 broker_jmx_exporter102 broker_jmx_exporter103  
fi

docker-compose -f ${DOCKER_COMPOSE_FILE} up -d prometheus grafana

echo -e "\n*************************************************************************"
docker-compose -f ${DOCKER_COMPOSE_FILE} ps
echo -e "\n*************************************************************************"
echo -e "Grafana (Login : admin / Password : kafka) : http://localhost:3000"
echo -e "Prometheus : http://localhost:9090"

exit 0
